@startuml

!define QO (Q,orchid)
!define QW (W,orange)
!define OSG (O,lightblue)
!define Mixin (M, brown)


title EWS User Interface Widgets Class Diagram

#---------------------------------------------------------

package app

package widget

#---------------------------------------------------------

class EWSMainWindow << QW QMainWindow >>
EWSMainWindow : -simulation : SimulationState


#---------------------------------------------------------

class DripSourceEditor << QW >>

DripSourceEditor : +enabled : bool
DripSourceEditor : +frequency : int
DripSourceEditor : +amplitude : int
DripSourceEditor : +pulse()


#---------------------------------------------------------

class WallEditor << QW >>
WallEditor : +addWall(w : WallPotential)
WallEditor : +removeWall(w : WallPotential)
WallEditor : +selectWall(w : WallPotential)
WallEditor : -selectedWall : WallPotential
WallEditor : -walls : Set<WallPotential>

#---------------------------------------------------------

class BarrierEditor << QW >>
BarrierEditor : +addBarrier(w : BarrierPotential)
BarrierEditor : +removeBarrier(w : BarrierPotential)
BarrierEditor : +selectBarrier(w : BarrierPotential)
BarrierEditor : -selectedBarrier : BarrierPotential
BarrierEditor : -barriers : Set<BarrierPotential>
BarrierEditor : +setNumSlits(slits : int[1,2])
BarrierEditor : +setSlitWidth(width : float)
BarrierEditor : +setSlitSeparation(width : float)

#---------------------------------------------------------

class SimulationControls << QW >>
SimulationControls : -simulation : SimulationState
SimulationControls : +play()
SimulationControls : +pause()
SimulationControls : +reset()


#---------------------------------------------------------


class QGLWidget << QW >>
QGLWidget : +glcontext


class osgViewer << OSG >>
osgViewer : +setCameraManipulator(manip : osgMatrixManipulator)
note left of osgViewer
A powerful OpenSceneGraph 
encapsulation of the multiple 
components necessary to setup
and manage the scene graph and 
OpenGL pipeline.
end note

class OSGWidget << Mixin >>
QGLWidget <|-- OSGWidget
osgViewer <|-- OSGWidget

OSGWidget : -timer : QTimer
OSGWidget : -gw : GraphicsWindowEmbedded

OSGWidget : paintGL()
    
OSGWidget : resizeGL(width : int,height : int);
OSGWidget : keyPressEvent(e : QKeyEvent*)
OSGWidget : keyReleaseEvent(e :  QKeyEvent*)
OSGWidget : mousePressEvent(e : QMouseEvent*)
OSGWidget : mouseReleaseEvent(e : QMouseEvent*)
OSGWidget : mouseMoveEvent(e : QMouseEvent*)


class osgCamera << OSG >>
osgCamera : +displaySettings : osgDisplaySettings
osgCamera : +viewport : osgViewport
osgCamera : +projectionMatrix : osgMatrix
osgCamera : +viewMatrix : osgMatrix

osgViewer *-- osgCamera : provides

class osgNode << OSG >>
osgViewer "sceneRoot" --> "1" osgNode : renders

class osgGroup << OSG >>
osgGroup o-- "0..*" osgNode : combines

class osgGeode << OSG >>
osgGeode : +drawables : List<osgDrawable>

osgNode <|-- osgGroup
osgNode <|-- osgGeode

#---------------------------------------------------------


EWSMainWindow *-- "2" DripSourceEditor
EWSMainWindow *-- "1" WallEditor
EWSMainWindow *-- "1" BarrierEditor
EWSMainWindow *---- "1" OSGWidget
EWSMainWindow *- "1" SimulationControls


end package


#---------------------------------------------------------

package drawables
class SceneRoot << OSG >>
class DrawableQtAdapter << Mixin >>
end package

end package

osgGroup <|-- SceneRoot
osgGeode <|-- DrawableQtAdapter

SceneRoot "1" .> "0..*" DrawableQtAdapter


@enduml