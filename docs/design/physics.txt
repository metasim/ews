@startuml

!define QO (Q,orchid)
!define QW (W,orange)
!define OSG (O,lightblue)

title Wave Physics Class Diagram


  
#-------------------------------------------------------------

package app.model

class SimulationState <<QO>>
class DripSource <<QO>>
class BarrierSet <<QO>>
class Barrier <<QO>>
class WaveMedium <<QO>>

BarrierSet "1" o-- "0..*" Barrier
SimulationState "1" o--- "1" BarrierSet
SimulationState "1" o-- "2" DripSource
SimulationState "1" o-- "1" WaveMedium

end package

#-------------------------------------------------------------

package physics

  
#-------------------------------------------------------------

package potentials

abstract class Potential 
Potential : +computePotential(i : int, j : int, time : int) : float
Potential : +enabled : bool

class CompositePotential
CompositePotential : +getPotential() : List

class WallPotential
WallPotential : +srcPoint : Vec2
WallPotential : +dstPoint : Vec2
WallPotential : +thickness : Real

class SlitPotential
SlitPotential : +slitWidth : Real
SlitPotential : addSlit(alphaVal : Real)
SlitPotential : getSlitLocation(slitNumber : int) : Vec2
SlitPotential : removeSlit(slitNumber : int)

class PrecomputedPotential
PrecomputedPotential : +PrecomputedPotential(potential : Potential, width : int, length : int)
PrecomputedPotential : +setPotential(potential : Potential) : void
PrecomputedPotential : +setLatticeSize(width : int, length : int) : void

Potential <|- CompositePotential
Potential "0..*" <--o "1" CompositePotential

Potential <|-- PrecomputedPotential
Potential <|-- WallPotential
WallPotential <|-- SlitPotential

end package

  
#-------------------------------------------------------------

class Oscillator 
Oscillator : +enabled :bool
Oscillator : +location : Pnt3
Oscillator : +amplitude : float
Oscillator : +period : float

class WaveModel
WaveModel : +potential : Potential
WaveModel : +propagate() : void
WaveModel : +setSourceValue(x : int, y : int, value : float) : void

class Lattice
Lattice : -amplitude : Matrix
Lattice : Lattice(width : int, length : int)
Lattice : computeAverageValue(x : int, y : int, windowWidth : int) : float
Lattice : getValue(x : int, y : int) : float
Lattice : setValue(x : int, y : int, value : float) : void
Lattice : setSize(width : int, length : int) : void
Lattice : getWidth() : int
Lattice : getLength() : int

WaveModel --> PrecomputedPotential : receives
Oscillator "1" --> "1" WaveModel : has, updates
WaveModel -> Lattice : produces

abstract class WavePropagator
WavePropagator : +WavePropagator(potential : Potential)
WavePropagator : +setBoundaryCondition(x : int, y : int, value : float) : void
WavePropagator : +propagate(lattice : Lattice) : void

class DampedClassicalWavePropagator
DampedClassicalWavePropagator : -dampX : int
DampedClassicalWavePropagator : -dampY : int
DampedClassicalWavePropagator : +potential : Potential
DampedClassicalWavePropagator : -prevLattice : Lattice
DampedClassicalWavePropagator : +DampedClassicalWavePropagator(potential : Potential, dampX : int, dampY : int)
DampedClassicalWavePropagator "1" --> "2" Lattice : has, produces
DampedClassicalWavePropagator -> Potential : has
DampedClassicalWavePropagator -> PrecomputedPotential : receives

WaveModel "1" --> "1" WavePropagator : has
WaveModel "1" ..> "1" DampedClassicalWavePropagator : creates

WavePropagator <|- DampedClassicalWavePropagator

end package

WaveMedium "1" --> "1" WaveModel : has
BarrierSet "1" -> "1" CompositePotential : has, creates
BarrierSet "1" .> "1" PrecomputedPotential : creates
BarrierSet "1" .> "1" WaveModel : sends PrecomputedPotential
Barrier "1" ..> "1" SlitPotential : creates
DripSource "1" --> "1" Oscillator : has

@enduml
